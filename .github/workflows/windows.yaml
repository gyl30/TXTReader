name: CI with MSYS2 for TXTReader

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-windows-mingw:
    runs-on: windows-latest
    env:
      EXECUTABLE_NAME: TXTReader
      BOOST_VERSION: '1.85.0'
      BOOST_VERSION_UNDERSCORE: '1_85_0'

    strategy:
      matrix:
        build_type: [debug, release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-qt6-tools
            p7zip
            wget

      - name: Configure uchardet
        shell: msys2 {0}
        run: |
          cmake -S third/uchardet -B third/uchardet/build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC=ON -DBUILD_BINARY=OFF -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/deps -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Build uchardet
        shell: msys2 {0}
        run: cmake --build third/uchardet/build --config Release

      - name: Install uchardet
        shell: msys2 {0}
        run: cmake --install third/uchardet/build --config Release

      - name: Configure CMake
        shell: msys2 {0}
        run: |
          cmake -S . -B build/${{ matrix.build_type }} \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH=${{ github.workspace }}/build/deps

      - name: Build with CMake
        shell: msys2 {0}
        run: cmake --build build/${{ matrix.build_type }}

      - name: Install Project
        shell: msys2 {0}
        run: cmake --install build/${{ matrix.build_type }} --prefix install

      - name: Package All Dependencies
        shell: msys2 {0}
        run: |
          set -e
          INSTALL_DIR="install"
          TARGET_DIR="$INSTALL_DIR/bin"
          EXECUTABLE="TXTReader.exe"
          
          echo "--- Copying dependencies for $EXECUTABLE ---"
          ldd "$TARGET_DIR/$EXECUTABLE" | grep -i 'mingw64/bin/' | awk '{print $3}' | sort -u | xargs -I % cp -v -n % "$TARGET_DIR"
          echo "--- Copying Qt platform plugins ---"
          mkdir -p "$TARGET_DIR/platforms"
          cp -v /mingw64/share/qt6/plugins/platforms/qwindows.dll "$TARGET_DIR/platforms/"
          
          echo "--- Dependency packaging complete ---"
          ls -R "$INSTALL_DIR"

      - name: Prepare for Archiving
        shell: msys2 {0}
        run: |
          PACKAGE_DIR="${{ env.EXECUTABLE_NAME }}-mingw-x64-${{ matrix.build_type }}"
          ARCHIVE_NAME="${PACKAGE_DIR}.zip"
          mv install/bin "$PACKAGE_DIR"
          echo "PACKAGE_DIR=$PACKAGE_DIR" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "--- Prepared directory structure for archiving ---"
          ls -R "$PACKAGE_DIR"
      - name: Create Archive
        shell: msys2 {0}
        run: |
          7z a "${{ env.ARCHIVE_PATH }}" "${{ env.PACKAGE_DIR }}/"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_DIR }}
          path: ${{ env.ARCHIVE_PATH }}

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release' && matrix.build_type == 'release'
        with:
          files: ${{ env.ARCHIVE_PATH }}
